{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_OverallWeather = _resolveComponent(\"OverallWeather\");\n  const _component_WindowArea = _resolveComponent(\"WindowArea\");\n  const _component_WeekForcast = _resolveComponent(\"WeekForcast\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.updateWeather && $options.updateWeather(...args)),\n    ref: \"updateButton\",\n    id: \"updateButton\"\n  }, \"Get Current\", 512 /* NEED_PATCH */), _createVNode(_component_OverallWeather, {\n    ref: \"OverallWeather\"\n  }, null, 512 /* NEED_PATCH */), _createVNode(_component_WindowArea, {\n    ref: \"WindowArea\"\n  }, null, 512 /* NEED_PATCH */), _createVNode(_component_WeekForcast, {\n    ref: \"WeekForcast\"\n  }, null, 512 /* NEED_PATCH */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createElementVNode","onClick","_cache","args","$options","updateWeather","ref","id","_createVNode","_component_OverallWeather","_component_WindowArea","_component_WeekForcast"],"sources":["C:\\Users\\Tabitha\\projects\\weather-app\\app\\src\\App.vue"],"sourcesContent":["<template>\n  <button @click=\"updateWeather\" ref=\"updateButton\" id=\"updateButton\">Get Current</button>\n  <OverallWeather ref=\"OverallWeather\"/>\n  <WindowArea ref=\"WindowArea\"/>\n  <WeekForcast ref=\"WeekForcast\"/>\n</template>\n\n<script>\nimport OverallWeather from './components/OverallWeather.vue';\nimport WindowArea from './components/WindowArea.vue'\nimport WeekForcast from './components/WeekForcast.vue';\nimport { store } from './shared/store';\n\nexport default {\n  name: 'App',\n  components: {\n    WindowArea,\n    OverallWeather,\n    WeekForcast,\n  },\n  data() {\n    return {\n      latitude: null,\n      longitude: null,\n      location: null\n    }\n  },\n  async mounted() {\n    const location = await store.getLocation();\n    console.log('[App] Location: ', location);\n    this.latitude = location.latitude;\n    this.longitude = location.longitude;\n    this.updateWeather();\n\n    // FUTURE: update weather every 5 minutes\n  },\n  methods: {\n    async updateWeather() {\n      console.log('[App] Update Weather');\n      const weather = await store.getWeather(this.latitude, this.longitude);\n      console.log('[App] Weather: ', weather);\n      this.$refs.OverallWeather.setWeather(weather);\n      this.$refs.WindowArea.setWeather(weather);\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  height: 100%;\n\n  display: grid;\n  grid-template-columns: 40% 60%;\n  grid-template-rows: 1fr 1fr;\n  grid-template-areas:\n    \"overallWeather windowArea\"\n    \"weekForcast windowArea\";\n}\n#updateButton {\n  position: absolute;\n}\n</style>\n"],"mappings":";;;;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,mBAAA,CAAwF;IAA/EC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,aAAA,IAAAD,QAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;IAAEG,GAAG,EAAC,cAAc;IAACC,EAAE,EAAC;KAAe,aAAW,yBAC/EC,YAAA,CAAsCC,yBAAA;IAAtBH,GAAG,EAAC;EAAgB,gCACpCE,YAAA,CAA8BE,qBAAA;IAAlBJ,GAAG,EAAC;EAAY,gCAC5BE,YAAA,CAAgCG,sBAAA;IAAnBL,GAAG,EAAC;EAAa,+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}