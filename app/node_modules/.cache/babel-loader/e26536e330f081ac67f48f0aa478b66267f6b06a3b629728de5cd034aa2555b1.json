{"ast":null,"code":"import axios from 'axios';\nexport const store = {\n  location: {},\n  weather: {},\n  async initialize() {\n    this.location = await this.getLocation();\n    this.weather = await this.getWeather(this.location.latitude, this.location.longitude);\n  },\n  async getLocation() {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(position => resolve(position.coords), error => reject(error));\n    });\n  },\n  async getWeather(latitude, longitude) {\n    // FUTURE: add more customization options: C vs F\n    const response = await axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=sunrise,sunset,weather_code,temperature_2m_max,temperature_2m_min&hourly=temperature_2m,weather_code&current=temperature_2m,weather_code,is_day&timezone=auto&forecast_days=3&timeformat=unixtime&wind_speed_unit=mph&temperature_unit=fahrenheit&precipitation_unit=inch`);\n    return response;\n  },\n  getCurrentTime(data) {\n    console.log('[Store] data: ', data.current.time, data.utc_offset_seconds);\n    const time = data.utc_offset_seconds + data.current.time * 1000;\n    return new Date(time).toLocaleTimeString(\"en-US\", {\n      timeStyle: 'short'\n    });\n  }\n};","map":{"version":3,"names":["axios","store","location","weather","initialize","getLocation","getWeather","latitude","longitude","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","error","response","get","getCurrentTime","data","console","log","current","time","utc_offset_seconds","Date","toLocaleTimeString","timeStyle"],"sources":["C:/Users/Tabitha/projects/weather-app/app/src/shared/store.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const store = {\r\n    location: {},\r\n\r\n    weather: {},\r\n\r\n    async initialize() {\r\n        this.location = await this.getLocation()\r\n        this.weather = await this.getWeather(this.location.latitude, this.location.longitude)\r\n    },\r\n\r\n    async getLocation() {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.geolocation.getCurrentPosition(\r\n                position => resolve(position.coords),\r\n                error => reject(error)\r\n            );\r\n        });\r\n    },\r\n\r\n    async getWeather(latitude, longitude) {\r\n        // FUTURE: add more customization options: C vs F\r\n        const response = await axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&daily=sunrise,sunset,weather_code,temperature_2m_max,temperature_2m_min&hourly=temperature_2m,weather_code&current=temperature_2m,weather_code,is_day&timezone=auto&forecast_days=3&timeformat=unixtime&wind_speed_unit=mph&temperature_unit=fahrenheit&precipitation_unit=inch`)\r\n        return response\r\n    },\r\n\r\n    getCurrentTime(data) {\r\n        console.log('[Store] data: ', data.current.time, data.utc_offset_seconds);\r\n        const time = data.utc_offset_seconds + (data.current.time * 1000);\r\n        return new Date(time).toLocaleTimeString(\"en-US\", {timeStyle: 'short'});\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,KAAK,GAAG;EACjBC,QAAQ,EAAE,CAAC,CAAC;EAEZC,OAAO,EAAE,CAAC,CAAC;EAEX,MAAMC,UAAUA,CAAA,EAAG;IACf,IAAI,CAACF,QAAQ,GAAG,MAAM,IAAI,CAACG,WAAW,CAAC,CAAC;IACxC,IAAI,CAACF,OAAO,GAAG,MAAM,IAAI,CAACG,UAAU,CAAC,IAAI,CAACJ,QAAQ,CAACK,QAAQ,EAAE,IAAI,CAACL,QAAQ,CAACM,SAAS,CAAC;EACzF,CAAC;EAED,MAAMH,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpCC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACpCC,QAAQ,IAAIL,OAAO,CAACK,QAAQ,CAACC,MAAM,CAAC,EACpCC,KAAK,IAAIN,MAAM,CAACM,KAAK,CACzB,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAED,MAAMX,UAAUA,CAACC,QAAQ,EAAEC,SAAS,EAAE;IAClC;IACA,MAAMU,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,mDAAmDZ,QAAQ,cAAcC,SAAS,kRAAkR,CAAC;IACtY,OAAOU,QAAQ;EACnB,CAAC;EAEDE,cAAcA,CAACC,IAAI,EAAE;IACjBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAACG,OAAO,CAACC,IAAI,EAAEJ,IAAI,CAACK,kBAAkB,CAAC;IACzE,MAAMD,IAAI,GAAGJ,IAAI,CAACK,kBAAkB,GAAIL,IAAI,CAACG,OAAO,CAACC,IAAI,GAAG,IAAK;IACjE,OAAO,IAAIE,IAAI,CAACF,IAAI,CAAC,CAACG,kBAAkB,CAAC,OAAO,EAAE;MAACC,SAAS,EAAE;IAAO,CAAC,CAAC;EAC3E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}