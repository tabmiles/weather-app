{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_WeatherType = _resolveComponent(\"WeatherType\");\n  const _component_CurrentWeather = _resolveComponent(\"CurrentWeather\");\n  const _component_WeekForcast = _resolveComponent(\"WeekForcast\");\n  const _component_Character = _resolveComponent(\"Character\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_WeatherType), _createVNode(_component_CurrentWeather, {\n    location: \"\"\n  }), _createVNode(_component_WeekForcast), _createVNode(_component_Character)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","_component_WeatherType","_component_CurrentWeather","location","_component_WeekForcast","_component_Character"],"sources":["C:\\Users\\Tabitha\\projects\\weather-app\\app\\src\\App.vue"],"sourcesContent":["<template>\n  <WeatherType/>\n  <CurrentWeather location=\"\"/>\n  <WeekForcast/>\n  <Character/>\n</template>\n\n<script>\nimport Character from './components/Character.vue';\nimport CurrentWeather from './components/CurrentWeather.vue';\nimport WeatherType from './components/WeatherType.vue'\nimport WeekForcast from './components/WeekForcast.vue';\nimport axios from 'axios';\n\nexport default {\n  name: 'App',\n  components: {\n    WeatherType,\n    CurrentWeather,\n    WeekForcast,\n    Character\n  },\n  mounted() {\n    console.log('***', this.getLocation());\n    // TODO: add time to consistently update weather\n    this.getWeather();\n  },\n  data() {\n    return {\n      latitude: null,\n      longitude: null,\n      location: null\n    }\n  },\n  methods: {\n    getWeather() {\n      if(this.latitude === null && this.longitude === null) {\n        navigator.geolocation.getCurrentPosition((posistion) => {\n          this.latitude = posistion.coords.latitude;\n          this.longitude = posistion.coords.longitude;\n          // TODO: add check for no location\n          // FUTURE: F vs C\n          // FUTURE: wind speed k/s vs mph\n          // FUTURE: precipitation in vs mm\n          axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${this.latitude}&longitude=${this.longitude}&daily=sunrise,sunset&current=temperature_2m,weather_code,is_day&timezone=auto&forecast_days=1&wind_speed_unit=mph&temperature_unit=fahrenheit&precipitation_unit=inch`)\n          .then((response) => {\n            console.log('Response: ', response);\n          });\n      });\n      } else {\n        axios.get(`https://api.open-meteo.com/v1/forecast?latitude=${this.latitude}&longitude=${this.longitude}&daily=sunrise,sunset&current=temperature_2m,weather_code,is_day&timezone=auto&forecast_days=1&wind_speed_unit=mph&temperature_unit=fahrenheit&precipitation_unit=inch`)\n        .then((response) => {\n          console.log('Response: ', response);\n        });\n      }\n    },\n    getLocation() {\n      return navigator.geolocation.getCurrentPosition((posistion) => {\n          this.latitude = posistion.coords.latitude;\n          this.longitude = posistion.coords.longitude;\n      });\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;;;;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAcC,sBAAA,GACdD,YAAA,CAA6BE,yBAAA;IAAbC,QAAQ,EAAC;EAAE,IAC3BH,YAAA,CAAcI,sBAAA,GACdJ,YAAA,CAAYK,oBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}